#!/usr/bin/env python
import os
import sys
import subprocess
import re

class _Options(object):
  help = False

class CloneFailure(Exception):

  """Indicate the remote clone of repo itself failed.
  """
 
def _ParseArguments(args):
  cmd = None
  opt = _Options()
  arg = []

  for i in range(len(args)):
    a = args[i]
    if a == '-h' or a == '--help':
      opt.help = True

    elif not a.startswith('-'):
      cmd = a
      arg = args[i + 1:]
      break
  return cmd, opt, arg

def _CloneSubRepos(args):
  if os.path.islink('default.tag'):
    os.remove('default.tag')
  f = open(args[0],'r')
  lines = f.read().splitlines()
  cmd = ['ln','-s']
  cmd.extend([args[0]])
  cmd.extend(['default.tag'])
  subprocess.Popen(cmd)
  for line in lines:
    if line == '':
      continue
    strs = re.split(r',',line)
    if os.path.isdir(strs[0]):
      print ("crepo: folder exist")
      continue
    cmd = ['git', 'clone']
    repo = strs[1]
    cmd.extend([repo])
    cmd.extend([strs[0]])
    p = subprocess.Popen(cmd)
    p.wait()
    del cmd
  f.close()
  print ("crepo: init done")
  return

def _SyncSubRepos():
  if 0 == os.path.isfile('default.tag'):
    print ("fatal: no default file. Please crepo init")
    return
  f = open('default.tag','r')
  lines = f.read().splitlines()
  cwd = os.getcwd()
  for line in lines:
    strs = re.split(r',',line)
    if os.path.isdir(strs[0]):
      os.chdir(strs[0])
      cmd = ['git', 'fetch']
      p = subprocess.Popen(cmd)
      p.wait()
      cmd = ['git', 'checkout']
      version = strs[2]
      cmd.extend([version])
      try:
        subprocess.Popen(cmd)
      except OSError as e:
        print ('git checkout fail!')
      os.chdir(cwd)
      del cmd
    else:
      print ('fatal! git repo does not exsit: %s' % re.split(r',',line)[0])
  f.close()
  print ("crepo: sync done")
  return

def _DevSubRepos(args):
  old_file = os.readlink('default.tag') 
  f_old = open(old_file,'r')
  f_new = open('gentag.tmp','wt')
  lines = f_old.read().splitlines()
  cwd = os.getcwd()
  for line in lines:
     strs = re.split(r',',line)
     path = strs[0]
     if not os.path.isdir(path):
       print ('fatal! git repo does not exsit: %s' % path)
       continue
     for arg in args:
       if path.endswith(arg):
         os.chdir(path)
         cmd = "git checkout master && git pull"
         p = subprocess.Popen(cmd,shell=True)
         p.wait()
         os.chdir(cwd)
         line = strs[0] + ',' + strs[1] + ',master\n'
     f_new.write(line+'\n')
  f_old.close()
  f_new.close()
  os.remove(old_file)
  os.rename('gentag.tmp',old_file)
  print ("crepo: set to devoplop mode done")
  return

def _InitTag(args):
  f = open(args[0],'wt')
  cmd = 'find -iname ".git"'
  p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
  result = p.stdout.read()
  lines = re.split(r'\n', result.decode())
  cwd = os.getcwd()
  for line in lines:
    if './.git' == line:
      continue
    elif not '' == line:
      path = line.strip('/.git')
      os.chdir(path)
      cmd = 'git remote --verbose | grep fetch'
      p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
      result = p.stdout.read()
      url = result.decode().rstrip('(fetch)\n').lstrip('origin').strip()
      cmd = 'git rev-list --all --max-count=1'
      p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
      version = p.stdout.read()
      f.write(path + ',' + url + ',' + version.decode())
      os.chdir(cwd)
  f.close()
  return

def _UpdateTag(args):
  f_old = open(args[0],'r')
  f_new = open('gentag.tmp','wt')
  lines = f_old.read().splitlines()
  cwd = os.getcwd()
  for line in lines:
    strs = re.split(r',',line)
    if not os.path.isdir(strs[0]):
      print ('crepo: folder does not exist')
      sys.exit(1)
    if not strs[2] == 'master':
      os.chdir(strs[0])
      cmd = 'git rev-list --all --max-count=1'
      p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
      version = p.stdout.read()
      line = strs[0] + ',' + strs[1] + ',' + version.decode()
      os.chdir(cwd)
    f_new.write(line)  
  f_old.close()
  f_new.close()
  os.remove(args[0])
  os.rename('gentag.tmp',args[0])
  print ('crepo: tag generation done')
  return

def main(orig_args):
  cmd, opt, args = _ParseArguments(orig_args)

  cwd = os.getcwd()
  if cmd == 'init':
    try:
     _CloneSubRepos(args);
    except CloneFailure:
      print("fatal: cloning the git-crepo repository failed, will remove %s ")
      sys.exit(1)
  elif cmd == 'sync':
    try:
     _SyncSubRepos();
    except CloneFailure:
      print("fatal: sync failed")
      sys.exit(1)
  elif cmd == 'develop':
    try:
     _DevSubRepos(args);
    except CloneFailure:
      print("fatal: develop failed")
      sys.exit(1)
  elif cmd == 'tag':
    if args[0] == 'update':
      try:
        _UpdateTag(args[1:])
      except CloneFailure:
        print("fatal: tag update failed")
        sys.exit(1)
    elif args[0] == 'init':
      try:
        _InitTag(args[1:])
      except CloneFailure:
        print("fatal: tag initialization failed")
  else:
    try:
      print ("TBD")
    except OSError as e:
      print("fatal: %s" % e)#, file=sys.stderr)
      sys.exit(148)


if __name__ == '__main__':
  main(sys.argv[1:])
