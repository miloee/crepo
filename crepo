#!/usr/bin/env python
import os
import sys
import subprocess

class _Options(object):
  help = False

class CloneFailure(Exception):

  """Indicate the remote clone of repo itself failed.
  """
 
def _ParseArguments(args):
  cmd = None
  opt = _Options()
  arg = []

  for i in range(len(args)):
    a = args[i]
    if a == '-h' or a == '--help':
      opt.help = True

    elif not a.startswith('-'):
      cmd = a
      arg = args[i + 1:]
      break
  return cmd, opt, arg

def _SyncSubRepos(args):
  me = ['git', 'clone']
  me.extend(args)
  print me
  subprocess.Popen(me)
  return


def main(orig_args):
  cmd, opt, args = _ParseArguments(orig_args)

#   if opt.help:
#     _Usage()
#   if cmd == 'help':
#     _Help(args)
  cwd = os.getcwd()
  if cmd == 'init':
    try:
      me = ['git', 'clone']
      me.extend(args)
      print me
      subprocess.Popen(me)
    except CloneFailure:
      print("fatal: cloning the git-crepo repository failed, will remove %s ")
      sys.exit(1)
  else if cmd == 'sync':
    try:
     __SyncSubRepos(args);

  else:
    try:
      print "TBD"
#     os.execv(sys.executable, me)
    except OSError as e:
      print("fatal: %s" % e)#, file=sys.stderr)
      sys.exit(148)


if __name__ == '__main__':
  main(sys.argv[1:])
